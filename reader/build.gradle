buildscript {
	ext { 
                verifierVersion = '2.2.4.RELEASE'
	}
	repositories { 
		mavenCentral()
	}
	dependencies { 
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifierVersion}"
                // PACT dependencies
		classpath "org.springframework.cloud:spring-cloud-contract-pact:${verifierVersion}"
	}
}

group = 'cf.dbaltor'

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'spring-cloud-contract'

application {
    mainClassName = 'reader.ReaderApplication'
}

applicationDefaultJvmArgs = ["--enable-preview"]

sourceCompatibility = 11
targetCompatibility = 11

configurations {
        compileOnly {
                extendsFrom annotationProcessor
        }
}
ext {
        set('springCloudVersion', "Hoxton.SR1")
}
dependencyManagement {
        imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		// required by spring-cloud-services-starter-config-client
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${cloudServicesDependencies}"
        }
}

dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        //implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        // https://mvnrepository.com/artifact/io.rest-assured/spring-mock-mvc
	testImplementation 'io.rest-assured:spring-mock-mvc:4.3.0'
        // includes com.sun.xml.bind:jaxb-osgi used by spring-mock-mvc
	testImplementation 'io.rest-assured:xml-path:4.2.0'

	//Required to connect to PCF Service Registry.
	implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry'
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-okhttp'
	implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
        //implementation("io.github.resilience4j:resilience4j-all:${resilience4jVersion}") 
	// required due to https://github.com/resilience4j/resilience4j/issues/1151
	implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}" 
	implementation "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}" 
	//implementation 'org.springframework.boot:spring-boot-starter-aop' // required by resilience4j
	////implementation "io.micrometer:micrometer-registry-prometheus" // may be used by resilience4j"
	
	//Required to connect to PCF Config Server. It includes 
		//Spring Cloud Config Client
		//Spring Security OAuth2
	implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-config-client'

        testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        implementation 'com.github.javafaker:javafaker:1.0.1'

        runtimeOnly 'com.h2database:h2'
}

contracts {
        baseClassForTests = 'reader.ReaderBase' // fallback base class
}
